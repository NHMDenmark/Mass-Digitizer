[
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "taxonspid",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column taxonspid using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rankid",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rankid using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "taxonspid",
    "expression": "grel:if((value==null).or(value==0).or(value=='None'), '', value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column taxonspid using expression grel:if((value==null).or(value==0).or(value=='None'), '', value)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if(value.contains(' sp. '), 'sp.', '')",
    "onError": "set-to-blank",
    "newColumnName": "qualifier",
    "columnInsertIndex": 5,
    "description": "Create column qualifier at index 5 based on column taxonfullname using expression grel:if(value.contains(' sp. '), 'sp.', '')"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "qualifier",
    "expression": "grel:if(cells['taxonfullname'].value.contains('aff.'), 'aff.', value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column qualifier using expression grel:if(cells['taxonfullname'].value.contains('aff.'), 'aff.', value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "qualifier",
    "expression": "grel:if(cells['taxonfullname'].value.contains('cf.'), 'cf.', value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column qualifier using expression grel:if(cells['taxonfullname'].value.contains('cf.'), 'cf.', value)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if(cells['rankid'].value == 260, value.split(' ')[3], '')",
    "onError": "set-to-blank",
    "newColumnName": "forma",
    "columnInsertIndex": 5,
    "description": "Create column forma at index 5 based on column taxonfullname using expression grel:if(cells['rankid'].value == 260, value.split(' ')[3], '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if(cells['rankid'].value == 240, cells['taxonfullname'].value.split(' ')[-1], '')",
    "onError": "set-to-blank",
    "newColumnName": "variety",
    "columnInsertIndex": 5,
    "description": "Create column variety at index 5 based on column taxonfullname using expression grel:if(cells['rankid'].value == 240, cells['taxonfullname'].value.split(' ')[-1], '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if(cells['rankid'].value == 230, value.split(' ')[2], '')",
    "onError": "set-to-blank",
    "newColumnName": "subspecies",
    "columnInsertIndex": 5,
    "description": "Create column subspecies at index 5 based on column taxonfullname using expression grel:if(cells['rankid'].value == 230, value.split(' ')[2], '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if(cells['rankid'].value >= 220, value.split(' ')[1], '')",
    "onError": "set-to-blank",
    "newColumnName": "species",
    "columnInsertIndex": 5,
    "description": "Create column species at index 5 based on column taxonfullname using expression grel:if(cells['rankid'].value >= 220, value.split(' ')[1], '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if(cells['rankid'].value >= 180, value.split(' ')[0], '')",
    "onError": "set-to-blank",
    "newColumnName": "genus",
    "columnInsertIndex": 5,
    "description": "Create column genus at index 5 based on column taxonfullname using expression grel:if(cells['rankid'].value >= 180, value.split(' ')[0], '')"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "species",
    "expression": "grel:if(value=='sp.', '', value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column species using expression grel:if(value=='sp.', '', value)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonspid",
    "expression": "grel:if((value==null).or(value==0), 'True', 'False')",
    "onError": "set-to-blank",
    "newColumnName": "newtaxonflag",
    "columnInsertIndex": 9,
    "description": "Create column newtaxonflag at index 9 based on column taxonspid using expression grel:if((value==null).or(value==0), 'True', 'False')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value==260), 'True',  '')",
    "onError": "set-to-blank",
    "newColumnName": "newformaflag",
    "columnInsertIndex": 5,
    "description": "Create column newformaflag at index 5 based on column taxonfullname using expression grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value==260), 'True',  '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value==240), 'True',  '')",
    "onError": "set-to-blank",
    "newColumnName": "newvarietyflag",
    "columnInsertIndex": 5,
    "description": "Create column newvarietyflag at index 5 based on column taxonfullname using expression grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value==240), 'True',  '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value==230), 'True',  '')",
    "onError": "set-to-blank",
    "newColumnName": "newsubspeciesflag",
    "columnInsertIndex": 5,
    "description": "Create column newsubspeciesflag at index 5 based on column taxonfullname using expression grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value==230), 'True',  '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if((cells['newtaxonflag'].value=='True').and(cells['taxonfullname'].value.split(' ').length()==2), 'True',  '')",
    "onError": "set-to-blank",
    "newColumnName": "newspeciesflag",
    "columnInsertIndex": 5,
    "description": "Create column newspeciesflag at index 5 based on column taxonfullname using expression grel:if((cells['newtaxonflag'].value=='True').and(cells['taxonfullname'].value.split(' ').length()==2), 'True',  '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value == 180), 'True', '')",
    "onError": "set-to-blank",
    "newColumnName": "newgenusflag",
    "columnInsertIndex": 5,
    "description": "Create column newgenusflag at index 5 based on column taxonfullname using expression grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value == 180), 'True', '')"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "taxonnumber",
    "expression": "value",
    "edits": [
      {
        "from": [
          "None"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": ""
      }
    ],
    "description": "Clear taxonnumber when 'None'"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "familyname",
    "newColumnName": "family",
    "description": "Rename column familyname to family"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "georegionname",
    "newColumnName": "broadgeographicalregion",
    "description": "Rename column georegionname to broadgeographicalregion"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "broadgeographicalregion",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "localityname",
    "columnInsertIndex": 28,
    "description": "Create column localityname at index 28 based on column broadgeographicalregion using expression grel:value"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "storagefullname",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": " | ",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column storagefullname by separator"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "storagefullname 2",
    "newColumnName": "site",
    "description": "Rename column storagefullname 2 to site"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "storagefullname 3",
    "newColumnName": "collection",
    "description": "Rename column storagefullname 3 to collection"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "storagename",
    "expression": "grel:if(value.split(' ')[0]=='Box', value.split(' ')[1], '')",
    "onError": "set-to-blank",
    "newColumnName": "box",
    "columnInsertIndex": 35,
    "description": "Create column box at index 35 based on column storagename using expression grel:if(value.split(' ')[0]=='Box', value.split(' ')[1], '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "storagename",
    "expression": "grel:if(value.split(' ')[0]=='Shelf', value.split(' ')[1], '')",
    "onError": "set-to-blank",
    "newColumnName": "shelf",
    "columnInsertIndex": 35,
    "description": "Create column shelf at index 35 based on column storagename using expression grel:if(value.split(' ')[0]=='Shelf', value.split(' ')[1], '')"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "agentmiddleinitial",
    "expression": "grel:if(value=='None', '', value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column agentmiddleinitial using expression grel:if(value=='None', '', value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "recorddatetime",
    "expression": "grel:value.slice(0,10).replace('-', '/')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column recorddatetime using expression grel:value.slice(0,10).replace('-', '/')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "recorddatetime",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "catalogeddate",
    "columnInsertIndex": 31,
    "description": "Create column catalogeddate at index 31 based on column recorddatetime using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "catalogeddate",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column catalogeddate using expression value.toDate()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "catalogeddate",
    "expression": "grel:value.toString('yyyy-MM-dd')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column catalogeddate using expression grel:value.toString('yyyy-MM-dd')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "id",
    "expression": "grel:'DaSSCo'",
    "onError": "set-to-blank",
    "newColumnName": "project",
    "columnInsertIndex": 2,
    "description": "Create column project at index 2 based on column id using expression grel:'DaSSCo'"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "id",
    "expression": "grel:'yes'",
    "onError": "set-to-blank",
    "newColumnName": "publish",
    "columnInsertIndex": 24,
    "description": "Create column publish at index 24 based on column id using expression grel:'yes'"
  }
]

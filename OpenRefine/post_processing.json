[
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "container",
    "expression": "grel:if(value!=null, 'MSO'+value, '')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column container using expression grel:if(value!=null, 'MSO'+value, '')"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "taxonspid",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column taxonspid using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "taxonspid",
    "expression": "grel:if((value==null).or(value==0).or(value=='None'), '', value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column taxonspid using expression grel:if((value==null).or(value==0).or(value=='None'), '', value)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonspid",
    "expression": "grel:if((value==null).or(value==0), 'True', 'False')",
    "onError": "set-to-blank",
    "newColumnName": "newtaxonflag",
    "columnInsertIndex": 11,
    "description": "Create column newtaxonflag at index 11 based on column taxonspid using expression grel:if((value==null).or(value==0), 'True', 'False')"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "agentmiddleinitial",
    "expression": "grel:if(value=='None', '', value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column agentmiddleinitial using expression grel:if(value=='None', '', value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "catalogeddate",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column catalogeddate using expression value.toDate()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "catalogeddate",
    "expression": "grel:value.toString('dd/MM/yyyy')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column catalogeddate using expression grel:value.toString('dd/MM/yyyy')"
  },
  {
    "op": "core/column-reorder",
    "columnNames": [
      "catalognumber",
      "catalogeddate",
      "notes",
      "project",
      "container",
      "family",
      "genus",
      "species",
      "subspecies",
      "variety",
      "forma",
      "newgenusflag",
      "newspeciesflag",
      "newsubspeciesflag",
      "newvarietyflag",
      "newformaflag",
      "qualifier",
      "site",
      "taxonname",
      "taxonnameid",
      "newtaxonflag",
      "taxonrankname",
      "typestatusname",
      "broadgeographicalregion",
      "georegionid",
      "collection",
      "storagename",
      "storagerankname",
      "preptypename",
      "collectionname",
      "username",
      "box",
      "shelf",
      "recorddatetime",
      "agentfirstname",
      "agentmiddleinitial",
      "agentlastname"
    ],
    "description": "Reorder columns"
  },
  {
    "op": "core/column-reorder",
    "columnNames": [
      "catalognumber",
      "catalogeddate",
      "notes",
      "project",
      "container",
      "family",
      "genus",
      "species",
      "subspecies",
      "variety",
      "forma",
      "newgenusflag",
      "newspeciesflag",
      "newsubspeciesflag",
      "newvarietyflag",
      "newformaflag",
      "qualifier",
      "site",
      "taxonname",
      "taxonnameid",
      "newtaxonflag",
      "taxonrankname",
      "typestatusname",
      "broadgeographicalregion",
      "collection",
      "storagename",
      "storagerankname",
      "preptypename",
      "collectionname",
      "box",
      "shelf",
      "recorddatetime",
      "agentfirstname",
      "agentmiddleinitial",
      "agentlastname"
    ],
    "description": "Reorder columns"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "notes",
    "expression": "grel:''",
    "onError": "set-to-blank",
    "newColumnName": "publish",
    "columnInsertIndex": 3,
    "description": "Create column publish at index 3 based on column notes using expression grel:''"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "publish",
    "expression": "grel:'True'",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column publish using expression grel:'True'"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "species",
    "expression": "grel:if(cells['genus'].value.contains(\" x \"), cells['genus'].value, value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column species using expression grel:if(cells['genus'].value.contains(\" x \"), cells['genus'].value, value)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "broadgeographicalregion",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "localityname",
    "columnInsertIndex": 20,
    "description": "Create column localityname at index 20 based on column broadgeographicalregion using expression grel:value"
  },
  {
    "op": "core/column-reorder",
    "columnNames": [
      "catalognumber",
      "catalogeddate",
      "notes",
      "publish",
      "project",
      "container",
      "family",
      "genus",
      "species",
      "subspecies",
      "variety",
      "forma",
      "newgenusflag",
      "newspeciesflag",
      "newsubspeciesflag",
      "newvarietyflag",
      "newformaflag",
      "qualifier",
      "site",
      "collection",
      "box",
      "shelf",
      "localityname",
      "taxonrankname",
      "typestatusname",
      "broadgeographicalregion",
      "storagename",
      "storagerankname",
      "preptypename",
      "collectionname",
      "recorddatetime",
      "agentfirstname",
      "agentmiddleinitial",
      "agentlastname"
    ],
    "description": "Reorder columns"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "species",
    "expression": "grel:if((value.contains(\"aff\\.\").or(value.contains(\"cf\\.\"))), '', value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column species using expression grel:if((value.contains(\"aff\\.\").or(value.contains(\"cf\\.\"))), '', value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "species",
    "expression": "grel:if(value=='sp.', '', value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column species using expression grel:if(value=='sp.', '', value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "species",
    "expression": "grel:if(cells['taxonfullname'].value.contains(\" x \"), cells['taxonfullname'].value.split(' ').slice(1).join(\" \"), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column species using expression grel:if(cells['taxonfullname'].value.contains(\" x \"), cells['taxonfullname'].value.split(' ').slice(1).join(\" \"), value)"
  },
  {
    "op": "core/column-reorder",
    "columnNames": [
      "catalognumber",
      "catalogeddate",
      "notes",
      "publish",
      "project",
      "container",
      "family",
      "genus",
      "species",
      "subspecies",
      "variety",
      "forma",
      "newgenusflag",
      "newspeciesflag",
      "newsubspeciesflag",
      "newvarietyflag",
      "newformaflag",
      "qualifier",
      "site",
      "collection",
      "box",
      "shelf",
      "localityname",
      "typestatusname",
      "broadgeographicalregion",
      "preptypename",
      "recorddatetime",
      "agentfirstname",
      "agentmiddleinitial",
      "agentlastname"
    ],
    "description": "Reorder columns"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "notes",
    "expression": "grel:\"DaSSCo\"",
    "onError": "set-to-blank",
    "newColumnName": "project",
    "columnInsertIndex": 3,
    "description": "Create column project at index 3 based on column notes using expression grel:\"DaSSCo\""
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "collection",
    "expression": "grel:if(value==\"Herbarium C: Danish Vascular Plant Collection\", \"C: Danish Herbarium\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column collection using expression grel:if(value==\"Herbarium C: Danish Vascular Plant Collection\", \"C: Danish Herbarium\", \"\")"
  }
]

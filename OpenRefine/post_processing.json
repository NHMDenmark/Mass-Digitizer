[
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "taxonspid",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column taxonspid using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rankid",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rankid using expression value.toNumber()"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonspid",
    "expression": "grel:if((value==null).or(value==0), 'True', 'False')",
    "onError": "set-to-blank",
    "newColumnName": "newtaxonflag",
    "columnInsertIndex": 11,
    "description": "Create column newtaxonflag at index 11 based on column taxonspid using expression grel:if((value==null).or(value==0), 'True', 'False')"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "storagefullname",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": " | ",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column storagefullname by separator"
  },
  {
    "op": "core/column-removal",
    "columnName": "storagefullname 1",
    "description": "Remove column storagefullname 1"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "storagefullname 2",
    "newColumnName": "site",
    "description": "Rename column storagefullname 2 to site"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "storagefullname 3",
    "newColumnName": "collection",
    "description": "Rename column storagefullname 3 to collection"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "storagename",
    "expression": "grel:if(value.split(' ')[0] == 'Shelf', value.split(' ')[1], '')",
    "onError": "set-to-blank",
    "newColumnName": "shelf",
    "columnInsertIndex": 31,
    "description": "Create column shelf at index 31 based on column storagename using expression grel:if(value.split(' ')[0] == 'Shelf', value.split(' ')[1], '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "storagename",
    "expression": "grel:if(value.split(' ')[0] == 'Box', value.split(' ')[1], '')",
    "onError": "set-to-blank",
    "newColumnName": "box",
    "columnInsertIndex": 31,
    "description": "Create column box at index 31 based on column storagename using expression grel:if(value.split(' ')[0] == 'Box', value.split(' ')[1], '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if(cells['rankid'].value >= 180, value.split(' ')[0], '')",
    "onError": "set-to-blank",
    "newColumnName": "genus",
    "columnInsertIndex": 5,
    "description": "Create column genus at index 5 based on column taxonfullname using expression grel:if(cells['rankid'].value >= 180, value.split(' ')[0], '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if(cells['rankid'].value >= 220, value.split(' ')[1], '')",
    "onError": "set-to-blank",
    "newColumnName": "species",
    "columnInsertIndex": 5,
    "description": "Create column species at index 5 based on column taxonfullname using expression grel:if(cells['rankid'].value == 220, value.split(' ')[1], '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if(cells['rankid'].value == 230, value.split(' ')[2], '')",
    "onError": "set-to-blank",
    "newColumnName": "subspecies",
    "columnInsertIndex": 5,
    "description": "Create column subspecies at index 5 based on column taxonfullname using expression grel:if(cells['rankid'].value == 230, value.split(' ')[2], '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if(cells[\"rankid\"].value == 240, cells[\"taxonfullname\"].value.split(' ')[-1], '')",
    "onError": "set-to-blank",
    "newColumnName": "variety",
    "columnInsertIndex": 5,
    "description": "Create column variety at index 5 based on column taxonfullname using expression grel:if(cells[\"rankid\"].value == 240, cells[\"taxonfullname\"].value.split(' ')[-1], '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if(cells['rankid'].value == 260, value.split(' ')[3], '')",
    "onError": "set-to-blank",
    "newColumnName": "forma",
    "columnInsertIndex": 5,
    "description": "Create column forma at index 5 based on column taxonfullname using expression grel:if(cells['rankid'].value == 260, value.split(' ')[3], '')"
  },
    {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value==260), 'True',  '')",
    "onError": "set-to-blank",
    "newColumnName": "newformaflag",
    "columnInsertIndex": 5,
    "description": "Create column newformaflag at index 5 based on column taxonfullname using expression grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value==260), 'True',  '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "newtaxonflag",
    "expression": "grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value==240), 'True',  '')",
    "onError": "set-to-blank",
    "newColumnName": "newvarietyflag",
    "columnInsertIndex": 17,
    "description": "Create column newvarietyflag at index 17 based on column newtaxonflag using expression grel:if((cells['newtaxonflag'].value=='True').and(cells['taxonfullname'].value.contains(' var\\. ')), 'True',  '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "newtaxonflag",
          "expression": "value",
          "columnName": "newtaxonflag",
          "from": 0.92,
          "to": 1.01,
          "selectNumeric": true,
          "selectNonNumeric": true,
          "selectBlank": true,
          "selectError": true
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "newtaxonflag",
    "expression": "grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value==230), 'True',  '')",
    "onError": "set-to-blank",
    "newColumnName": "newsubspeciesflag",
    "columnInsertIndex": 17,
    "description": "Create column newsubspeciesflag at index 17 based on column newtaxonflag using expression grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value==230), 'True',  '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "taxonfullname",
    "expression": "grel:if((cells['newtaxonflag'].value=='True').and(cells['taxonfullname'].value.split(' ').length()==2), 'True',  '')",
    "onError": "set-to-blank",
    "newColumnName": "newspeciesflag",
    "columnInsertIndex": 5,
    "description": "Create column newspeciesflag at index 5 based on column taxonfullname using expression grel:if((cells['newtaxonflag'].value=='True').and(cells['taxonfullname'].value.split(' ').length()==2), 'True',  '')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "genus",
    "expression": "grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value == 180), 'True', '')",
    "onError": "set-to-blank",
    "newColumnName": "newgenusflag",
    "columnInsertIndex": 8,
    "description": "Create column newgenusflag at index 8 based on column genus using expression grel:if((cells['newtaxonflag'].value=='True').and(cells['rankid'].value == 180), 'True', '')"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "familyname",
    "newColumnName": "family",
    "description": "Rename column familyname to family"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "multispecimen",
    "newColumnName": "container",
    "description": "Rename column multispecimen to container"
  },
    {
    "op": "core/column-rename",
    "oldColumnName": "georegionname",
    "newColumnName": "broadgeographicalregion",
    "description": "Rename column georegionname to broadgeographicalregion"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "georegionname",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "localityname",
    "columnInsertIndex": 26,
    "description": "Create column localityname at index 26 based on column georegionname using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "agentmiddleinitial",
    "expression": "grel:if(value=='None', '', value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column agentmiddleinitial using expression grel:if(value=='None', '', value)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "recorddatetime",
    "expression": "grel:value.slice(0,10)",
    "onError": "set-to-blank",
    "newColumnName": "catalogeddate",
    "columnInsertIndex": 44,
    "description": "Create column catalogeddate at index 44 based on column recorddatetime using expression grel:value.slice(0,10)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "catalogeddate",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column catalogeddate using expression value.toDate()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "catalogeddate",
    "expression": "grel:value.toString('dd/MM/yyyy')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column catalogeddate using expression grel:value.toString('dd/MM/yyyy')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "notes",
    "expression": "grel:''",
    "onError": "set-to-blank",
    "newColumnName": "publish",
    "columnInsertIndex": 3,
    "description": "Create column publish at index 3 based on column notes using expression grel:''"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "publish",
    "expression": "grel:'True'",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column publish using expression grel:'True'"
  },
  {
    "op": "core/column-reorder",
    "columnNames": [
      "catalognumber",
      "container",
      "newformaflag",
      "newspeciesflag",
      "forma",
      "variety",
      "newgenusflag",
      "subspecies",
      "species",
      "genus",
      "family",
      "taxonspid",
      "newsubspeciesflag",
      "newvarietyflag",
      "typestatusname",
      "broadgeographicalregion",
      "localityname",
      "site",
      "collection",
      "storagename",
      "storagerankname",
      "preptypename",
      "notes",
      "box",
      "shelf",
      "catalogeddate",
      "recorddatetime",
      "agentfirstname",
      "agentmiddleinitial",
      "agentlastname"
    ],
    "description": "Reorder columns"
  },
  {
    "op": "core/column-reorder",
    "columnNames": [
      "catalognumber",
      "container",
      "family",
      "genus",
      "species",
      "subspecies",
      "variety",
      "forma",
      "newgenusflag",
      "newspeciesflag",
      "newsubspeciesflag",
      "newvarietyflag",
      "newformaflag",
      "taxonspid",
      "typestatusname",
      "broadgeographicalregion",
      "localityname",
      "site",
      "collection",
      "shelf",
      "box",
      "preptypename",
      "notes",
      "catalogeddate",
      "recorddatetime",
      "agentfirstname",
      "agentmiddleinitial",
      "agentlastname"
    ],
    "description": "Reorder columns"
  },
  {
    "op": "core/column-reorder",
    "columnNames": [
      "catalognumber",
      "catalogeddate",
      "notes",
      "container",
      "family",
      "genus",
      "species",
      "subspecies",
      "variety",
      "forma",
      "newgenusflag",
      "newspeciesflag",
      "newsubspeciesflag",
      "newvarietyflag",
      "newformaflag",
      "taxonspid",
      "typestatusname",
      "localityname",
      "broadgeographicalregion",
      "preptypename",
      "site",
      "collection",
      "shelf",
      "box",
      "agentfirstname",
      "agentmiddleinitial",
      "agentlastname",
      "recorddatetime"
    ],
    "description": "Reorder columns"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "notes",
    "expression": "grel:''",
    "onError": "set-to-blank",
    "newColumnName": "publish",
    "columnInsertIndex": 3,
    "description": "Create column publish at index 3 based on column notes using expression grel:''"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "publish",
    "expression": "grel:'True'",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column publish using expression grel:'True'"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "notes",
    "expression": "grel:'DaSSCo'",
    "onError": "set-to-blank",
    "newColumnName": "project",
    "columnInsertIndex": 3,
    "description": "Create column broJECT at index 3 based on column notes using expression grel:'DaSSCo'"
  },
    {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "species",
    "expression": "grel:if(cells['genus'].value.contains(\" x \"), cells['genus'].value, value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column species using expression grel:if(cells['genus'].value.contains(\" x \"), cells['genus'].value, value)"
  },
    {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "container",
    "expression": "grel:if(value.startsWith(\"'\"), value.replace(\"'\", ''), '')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column container using expression grel:if(value.startsWith(\"'\"), value.replace(\"'\", ''), '')"
  }
]
